// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"github.com/go-rocs/user-rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCasbinRuleReq       = pb.AddCasbinRuleReq
	AddCasbinRuleResp      = pb.AddCasbinRuleResp
	AddConfigReq           = pb.AddConfigReq
	AddConfigResp          = pb.AddConfigResp
	AddFrontPermitReq      = pb.AddFrontPermitReq
	AddFrontPermitResp     = pb.AddFrontPermitResp
	AddLogReq              = pb.AddLogReq
	AddLogResp             = pb.AddLogResp
	AddOrderReq            = pb.AddOrderReq
	AddOrderResp           = pb.AddOrderResp
	AddPermissionReq       = pb.AddPermissionReq
	AddPermissionResp      = pb.AddPermissionResp
	AddRoleReq             = pb.AddRoleReq
	AddRoleResp            = pb.AddRoleResp
	AddSecretKeyReq        = pb.AddSecretKeyReq
	AddSecretKeyResp       = pb.AddSecretKeyResp
	AddUserReq             = pb.AddUserReq
	AddUserResp            = pb.AddUserResp
	CasbinRule             = pb.CasbinRule
	Config                 = pb.Config
	DelCasbinRuleReq       = pb.DelCasbinRuleReq
	DelCasbinRuleResp      = pb.DelCasbinRuleResp
	DelConfigReq           = pb.DelConfigReq
	DelConfigResp          = pb.DelConfigResp
	DelFrontPermitReq      = pb.DelFrontPermitReq
	DelFrontPermitResp     = pb.DelFrontPermitResp
	DelLogReq              = pb.DelLogReq
	DelLogResp             = pb.DelLogResp
	DelOrderReq            = pb.DelOrderReq
	DelOrderResp           = pb.DelOrderResp
	DelPermissionReq       = pb.DelPermissionReq
	DelPermissionResp      = pb.DelPermissionResp
	DelRoleReq             = pb.DelRoleReq
	DelRoleResp            = pb.DelRoleResp
	DelSecretKeyReq        = pb.DelSecretKeyReq
	DelSecretKeyResp       = pb.DelSecretKeyResp
	DelUserReq             = pb.DelUserReq
	DelUserResp            = pb.DelUserResp
	FrontPermit            = pb.FrontPermit
	GetCasbinRuleByIdReq   = pb.GetCasbinRuleByIdReq
	GetCasbinRuleByIdResp  = pb.GetCasbinRuleByIdResp
	GetConfigByIdReq       = pb.GetConfigByIdReq
	GetConfigByIdResp      = pb.GetConfigByIdResp
	GetFrontPermitByIdReq  = pb.GetFrontPermitByIdReq
	GetFrontPermitByIdResp = pb.GetFrontPermitByIdResp
	GetLogByIdReq          = pb.GetLogByIdReq
	GetLogByIdResp         = pb.GetLogByIdResp
	GetOrderByIdReq        = pb.GetOrderByIdReq
	GetOrderByIdResp       = pb.GetOrderByIdResp
	GetPermissionByIdReq   = pb.GetPermissionByIdReq
	GetPermissionByIdResp  = pb.GetPermissionByIdResp
	GetRoleByIdReq         = pb.GetRoleByIdReq
	GetRoleByIdResp        = pb.GetRoleByIdResp
	GetSecretKeyByIdReq    = pb.GetSecretKeyByIdReq
	GetSecretKeyByIdResp   = pb.GetSecretKeyByIdResp
	GetUserByIdReq         = pb.GetUserByIdReq
	GetUserByIdResp        = pb.GetUserByIdResp
	Log                    = pb.Log
	Order                  = pb.Order
	Permission             = pb.Permission
	Role                   = pb.Role
	SearchCasbinRuleReq    = pb.SearchCasbinRuleReq
	SearchCasbinRuleResp   = pb.SearchCasbinRuleResp
	SearchConfigReq        = pb.SearchConfigReq
	SearchConfigResp       = pb.SearchConfigResp
	SearchFrontPermitReq   = pb.SearchFrontPermitReq
	SearchFrontPermitResp  = pb.SearchFrontPermitResp
	SearchLogReq           = pb.SearchLogReq
	SearchLogResp          = pb.SearchLogResp
	SearchOrderReq         = pb.SearchOrderReq
	SearchOrderResp        = pb.SearchOrderResp
	SearchPermissionReq    = pb.SearchPermissionReq
	SearchPermissionResp   = pb.SearchPermissionResp
	SearchRoleReq          = pb.SearchRoleReq
	SearchRoleResp         = pb.SearchRoleResp
	SearchSecretKeyReq     = pb.SearchSecretKeyReq
	SearchSecretKeyResp    = pb.SearchSecretKeyResp
	SearchUserReq          = pb.SearchUserReq
	SearchUserResp         = pb.SearchUserResp
	SecretKey              = pb.SecretKey
	UpdateCasbinRuleReq    = pb.UpdateCasbinRuleReq
	UpdateCasbinRuleResp   = pb.UpdateCasbinRuleResp
	UpdateConfigReq        = pb.UpdateConfigReq
	UpdateConfigResp       = pb.UpdateConfigResp
	UpdateFrontPermitReq   = pb.UpdateFrontPermitReq
	UpdateFrontPermitResp  = pb.UpdateFrontPermitResp
	UpdateLogReq           = pb.UpdateLogReq
	UpdateLogResp          = pb.UpdateLogResp
	UpdateOrderReq         = pb.UpdateOrderReq
	UpdateOrderResp        = pb.UpdateOrderResp
	UpdatePermissionReq    = pb.UpdatePermissionReq
	UpdatePermissionResp   = pb.UpdatePermissionResp
	UpdateRoleReq          = pb.UpdateRoleReq
	UpdateRoleResp         = pb.UpdateRoleResp
	UpdateSecretKeyReq     = pb.UpdateSecretKeyReq
	UpdateSecretKeyResp    = pb.UpdateSecretKeyResp
	UpdateUserReq          = pb.UpdateUserReq
	UpdateUserResp         = pb.UpdateUserResp
	User                   = pb.User

	User interface {
		// -----------------------casbinRule-----------------------
		AddCasbinRule(ctx context.Context, in *AddCasbinRuleReq, opts ...grpc.CallOption) (*AddCasbinRuleResp, error)
		UpdateCasbinRule(ctx context.Context, in *UpdateCasbinRuleReq, opts ...grpc.CallOption) (*UpdateCasbinRuleResp, error)
		DelCasbinRule(ctx context.Context, in *DelCasbinRuleReq, opts ...grpc.CallOption) (*DelCasbinRuleResp, error)
		GetCasbinRuleById(ctx context.Context, in *GetCasbinRuleByIdReq, opts ...grpc.CallOption) (*GetCasbinRuleByIdResp, error)
		SearchCasbinRule(ctx context.Context, in *SearchCasbinRuleReq, opts ...grpc.CallOption) (*SearchCasbinRuleResp, error)
		// -----------------------configs-----------------------
		AddConfig(ctx context.Context, in *AddConfigReq, opts ...grpc.CallOption) (*AddConfigResp, error)
		UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
		DelConfig(ctx context.Context, in *DelConfigReq, opts ...grpc.CallOption) (*DelConfigResp, error)
		GetConfigById(ctx context.Context, in *GetConfigByIdReq, opts ...grpc.CallOption) (*GetConfigByIdResp, error)
		SearchConfig(ctx context.Context, in *SearchConfigReq, opts ...grpc.CallOption) (*SearchConfigResp, error)
		// -----------------------frontPermits-----------------------
		AddFrontPermit(ctx context.Context, in *AddFrontPermitReq, opts ...grpc.CallOption) (*AddFrontPermitResp, error)
		UpdateFrontPermit(ctx context.Context, in *UpdateFrontPermitReq, opts ...grpc.CallOption) (*UpdateFrontPermitResp, error)
		DelFrontPermit(ctx context.Context, in *DelFrontPermitReq, opts ...grpc.CallOption) (*DelFrontPermitResp, error)
		GetFrontPermitById(ctx context.Context, in *GetFrontPermitByIdReq, opts ...grpc.CallOption) (*GetFrontPermitByIdResp, error)
		SearchFrontPermit(ctx context.Context, in *SearchFrontPermitReq, opts ...grpc.CallOption) (*SearchFrontPermitResp, error)
		// -----------------------logs-----------------------
		AddLog(ctx context.Context, in *AddLogReq, opts ...grpc.CallOption) (*AddLogResp, error)
		UpdateLog(ctx context.Context, in *UpdateLogReq, opts ...grpc.CallOption) (*UpdateLogResp, error)
		DelLog(ctx context.Context, in *DelLogReq, opts ...grpc.CallOption) (*DelLogResp, error)
		GetLogById(ctx context.Context, in *GetLogByIdReq, opts ...grpc.CallOption) (*GetLogByIdResp, error)
		SearchLog(ctx context.Context, in *SearchLogReq, opts ...grpc.CallOption) (*SearchLogResp, error)
		// -----------------------orders-----------------------
		AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
		UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
		DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error)
		GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
		SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error)
		// -----------------------permissions-----------------------
		AddPermission(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*AddPermissionResp, error)
		UpdatePermission(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error)
		DelPermission(ctx context.Context, in *DelPermissionReq, opts ...grpc.CallOption) (*DelPermissionResp, error)
		GetPermissionById(ctx context.Context, in *GetPermissionByIdReq, opts ...grpc.CallOption) (*GetPermissionByIdResp, error)
		SearchPermission(ctx context.Context, in *SearchPermissionReq, opts ...grpc.CallOption) (*SearchPermissionResp, error)
		// -----------------------roles-----------------------
		AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error)
		UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
		DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*DelRoleResp, error)
		GetRoleById(ctx context.Context, in *GetRoleByIdReq, opts ...grpc.CallOption) (*GetRoleByIdResp, error)
		SearchRole(ctx context.Context, in *SearchRoleReq, opts ...grpc.CallOption) (*SearchRoleResp, error)
		// -----------------------secretKeys-----------------------
		AddSecretKey(ctx context.Context, in *AddSecretKeyReq, opts ...grpc.CallOption) (*AddSecretKeyResp, error)
		UpdateSecretKey(ctx context.Context, in *UpdateSecretKeyReq, opts ...grpc.CallOption) (*UpdateSecretKeyResp, error)
		DelSecretKey(ctx context.Context, in *DelSecretKeyReq, opts ...grpc.CallOption) (*DelSecretKeyResp, error)
		GetSecretKeyById(ctx context.Context, in *GetSecretKeyByIdReq, opts ...grpc.CallOption) (*GetSecretKeyByIdResp, error)
		SearchSecretKey(ctx context.Context, in *SearchSecretKeyReq, opts ...grpc.CallOption) (*SearchSecretKeyResp, error)
		// -----------------------users-----------------------
		AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error)
		GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
		SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// -----------------------casbinRule-----------------------
func (m *defaultUser) AddCasbinRule(ctx context.Context, in *AddCasbinRuleReq, opts ...grpc.CallOption) (*AddCasbinRuleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddCasbinRule(ctx, in, opts...)
}

func (m *defaultUser) UpdateCasbinRule(ctx context.Context, in *UpdateCasbinRuleReq, opts ...grpc.CallOption) (*UpdateCasbinRuleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateCasbinRule(ctx, in, opts...)
}

func (m *defaultUser) DelCasbinRule(ctx context.Context, in *DelCasbinRuleReq, opts ...grpc.CallOption) (*DelCasbinRuleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelCasbinRule(ctx, in, opts...)
}

func (m *defaultUser) GetCasbinRuleById(ctx context.Context, in *GetCasbinRuleByIdReq, opts ...grpc.CallOption) (*GetCasbinRuleByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetCasbinRuleById(ctx, in, opts...)
}

func (m *defaultUser) SearchCasbinRule(ctx context.Context, in *SearchCasbinRuleReq, opts ...grpc.CallOption) (*SearchCasbinRuleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchCasbinRule(ctx, in, opts...)
}

// -----------------------configs-----------------------
func (m *defaultUser) AddConfig(ctx context.Context, in *AddConfigReq, opts ...grpc.CallOption) (*AddConfigResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddConfig(ctx, in, opts...)
}

func (m *defaultUser) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateConfig(ctx, in, opts...)
}

func (m *defaultUser) DelConfig(ctx context.Context, in *DelConfigReq, opts ...grpc.CallOption) (*DelConfigResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelConfig(ctx, in, opts...)
}

func (m *defaultUser) GetConfigById(ctx context.Context, in *GetConfigByIdReq, opts ...grpc.CallOption) (*GetConfigByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetConfigById(ctx, in, opts...)
}

func (m *defaultUser) SearchConfig(ctx context.Context, in *SearchConfigReq, opts ...grpc.CallOption) (*SearchConfigResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchConfig(ctx, in, opts...)
}

// -----------------------frontPermits-----------------------
func (m *defaultUser) AddFrontPermit(ctx context.Context, in *AddFrontPermitReq, opts ...grpc.CallOption) (*AddFrontPermitResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddFrontPermit(ctx, in, opts...)
}

func (m *defaultUser) UpdateFrontPermit(ctx context.Context, in *UpdateFrontPermitReq, opts ...grpc.CallOption) (*UpdateFrontPermitResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateFrontPermit(ctx, in, opts...)
}

func (m *defaultUser) DelFrontPermit(ctx context.Context, in *DelFrontPermitReq, opts ...grpc.CallOption) (*DelFrontPermitResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelFrontPermit(ctx, in, opts...)
}

func (m *defaultUser) GetFrontPermitById(ctx context.Context, in *GetFrontPermitByIdReq, opts ...grpc.CallOption) (*GetFrontPermitByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetFrontPermitById(ctx, in, opts...)
}

func (m *defaultUser) SearchFrontPermit(ctx context.Context, in *SearchFrontPermitReq, opts ...grpc.CallOption) (*SearchFrontPermitResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchFrontPermit(ctx, in, opts...)
}

// -----------------------logs-----------------------
func (m *defaultUser) AddLog(ctx context.Context, in *AddLogReq, opts ...grpc.CallOption) (*AddLogResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddLog(ctx, in, opts...)
}

func (m *defaultUser) UpdateLog(ctx context.Context, in *UpdateLogReq, opts ...grpc.CallOption) (*UpdateLogResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateLog(ctx, in, opts...)
}

func (m *defaultUser) DelLog(ctx context.Context, in *DelLogReq, opts ...grpc.CallOption) (*DelLogResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelLog(ctx, in, opts...)
}

func (m *defaultUser) GetLogById(ctx context.Context, in *GetLogByIdReq, opts ...grpc.CallOption) (*GetLogByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetLogById(ctx, in, opts...)
}

func (m *defaultUser) SearchLog(ctx context.Context, in *SearchLogReq, opts ...grpc.CallOption) (*SearchLogResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchLog(ctx, in, opts...)
}

// -----------------------orders-----------------------
func (m *defaultUser) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddOrder(ctx, in, opts...)
}

func (m *defaultUser) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultUser) DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelOrder(ctx, in, opts...)
}

func (m *defaultUser) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetOrderById(ctx, in, opts...)
}

func (m *defaultUser) SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchOrder(ctx, in, opts...)
}

// -----------------------permissions-----------------------
func (m *defaultUser) AddPermission(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*AddPermissionResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddPermission(ctx, in, opts...)
}

func (m *defaultUser) UpdatePermission(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdatePermission(ctx, in, opts...)
}

func (m *defaultUser) DelPermission(ctx context.Context, in *DelPermissionReq, opts ...grpc.CallOption) (*DelPermissionResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelPermission(ctx, in, opts...)
}

func (m *defaultUser) GetPermissionById(ctx context.Context, in *GetPermissionByIdReq, opts ...grpc.CallOption) (*GetPermissionByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetPermissionById(ctx, in, opts...)
}

func (m *defaultUser) SearchPermission(ctx context.Context, in *SearchPermissionReq, opts ...grpc.CallOption) (*SearchPermissionResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchPermission(ctx, in, opts...)
}

// -----------------------roles-----------------------
func (m *defaultUser) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddRole(ctx, in, opts...)
}

func (m *defaultUser) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

func (m *defaultUser) DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*DelRoleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelRole(ctx, in, opts...)
}

func (m *defaultUser) GetRoleById(ctx context.Context, in *GetRoleByIdReq, opts ...grpc.CallOption) (*GetRoleByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetRoleById(ctx, in, opts...)
}

func (m *defaultUser) SearchRole(ctx context.Context, in *SearchRoleReq, opts ...grpc.CallOption) (*SearchRoleResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchRole(ctx, in, opts...)
}

// -----------------------secretKeys-----------------------
func (m *defaultUser) AddSecretKey(ctx context.Context, in *AddSecretKeyReq, opts ...grpc.CallOption) (*AddSecretKeyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddSecretKey(ctx, in, opts...)
}

func (m *defaultUser) UpdateSecretKey(ctx context.Context, in *UpdateSecretKeyReq, opts ...grpc.CallOption) (*UpdateSecretKeyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateSecretKey(ctx, in, opts...)
}

func (m *defaultUser) DelSecretKey(ctx context.Context, in *DelSecretKeyReq, opts ...grpc.CallOption) (*DelSecretKeyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelSecretKey(ctx, in, opts...)
}

func (m *defaultUser) GetSecretKeyById(ctx context.Context, in *GetSecretKeyByIdReq, opts ...grpc.CallOption) (*GetSecretKeyByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetSecretKeyById(ctx, in, opts...)
}

func (m *defaultUser) SearchSecretKey(ctx context.Context, in *SearchSecretKeyReq, opts ...grpc.CallOption) (*SearchSecretKeyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchSecretKey(ctx, in, opts...)
}

// -----------------------users-----------------------
func (m *defaultUser) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DelUser(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SearchUser(ctx, in, opts...)
}
