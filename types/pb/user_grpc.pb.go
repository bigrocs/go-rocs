// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	//-----------------------casbinRule-----------------------
	AddCasbinRule(ctx context.Context, in *AddCasbinRuleReq, opts ...grpc.CallOption) (*AddCasbinRuleResp, error)
	UpdateCasbinRule(ctx context.Context, in *UpdateCasbinRuleReq, opts ...grpc.CallOption) (*UpdateCasbinRuleResp, error)
	DelCasbinRule(ctx context.Context, in *DelCasbinRuleReq, opts ...grpc.CallOption) (*DelCasbinRuleResp, error)
	GetCasbinRuleById(ctx context.Context, in *GetCasbinRuleByIdReq, opts ...grpc.CallOption) (*GetCasbinRuleByIdResp, error)
	SearchCasbinRule(ctx context.Context, in *SearchCasbinRuleReq, opts ...grpc.CallOption) (*SearchCasbinRuleResp, error)
	//-----------------------configs-----------------------
	AddConfig(ctx context.Context, in *AddConfigReq, opts ...grpc.CallOption) (*AddConfigResp, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	DelConfig(ctx context.Context, in *DelConfigReq, opts ...grpc.CallOption) (*DelConfigResp, error)
	GetConfigById(ctx context.Context, in *GetConfigByIdReq, opts ...grpc.CallOption) (*GetConfigByIdResp, error)
	SearchConfig(ctx context.Context, in *SearchConfigReq, opts ...grpc.CallOption) (*SearchConfigResp, error)
	//-----------------------frontPermits-----------------------
	AddFrontPermit(ctx context.Context, in *AddFrontPermitReq, opts ...grpc.CallOption) (*AddFrontPermitResp, error)
	UpdateFrontPermit(ctx context.Context, in *UpdateFrontPermitReq, opts ...grpc.CallOption) (*UpdateFrontPermitResp, error)
	DelFrontPermit(ctx context.Context, in *DelFrontPermitReq, opts ...grpc.CallOption) (*DelFrontPermitResp, error)
	GetFrontPermitById(ctx context.Context, in *GetFrontPermitByIdReq, opts ...grpc.CallOption) (*GetFrontPermitByIdResp, error)
	SearchFrontPermit(ctx context.Context, in *SearchFrontPermitReq, opts ...grpc.CallOption) (*SearchFrontPermitResp, error)
	//-----------------------logs-----------------------
	AddLog(ctx context.Context, in *AddLogReq, opts ...grpc.CallOption) (*AddLogResp, error)
	UpdateLog(ctx context.Context, in *UpdateLogReq, opts ...grpc.CallOption) (*UpdateLogResp, error)
	DelLog(ctx context.Context, in *DelLogReq, opts ...grpc.CallOption) (*DelLogResp, error)
	GetLogById(ctx context.Context, in *GetLogByIdReq, opts ...grpc.CallOption) (*GetLogByIdResp, error)
	SearchLog(ctx context.Context, in *SearchLogReq, opts ...grpc.CallOption) (*SearchLogResp, error)
	//-----------------------orders-----------------------
	AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
	DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
	SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error)
	//-----------------------permissions-----------------------
	AddPermission(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*AddPermissionResp, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error)
	DelPermission(ctx context.Context, in *DelPermissionReq, opts ...grpc.CallOption) (*DelPermissionResp, error)
	GetPermissionById(ctx context.Context, in *GetPermissionByIdReq, opts ...grpc.CallOption) (*GetPermissionByIdResp, error)
	SearchPermission(ctx context.Context, in *SearchPermissionReq, opts ...grpc.CallOption) (*SearchPermissionResp, error)
	//-----------------------roles-----------------------
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*DelRoleResp, error)
	GetRoleById(ctx context.Context, in *GetRoleByIdReq, opts ...grpc.CallOption) (*GetRoleByIdResp, error)
	SearchRole(ctx context.Context, in *SearchRoleReq, opts ...grpc.CallOption) (*SearchRoleResp, error)
	//-----------------------secretKeys-----------------------
	AddSecretKey(ctx context.Context, in *AddSecretKeyReq, opts ...grpc.CallOption) (*AddSecretKeyResp, error)
	UpdateSecretKey(ctx context.Context, in *UpdateSecretKeyReq, opts ...grpc.CallOption) (*UpdateSecretKeyResp, error)
	DelSecretKey(ctx context.Context, in *DelSecretKeyReq, opts ...grpc.CallOption) (*DelSecretKeyResp, error)
	GetSecretKeyById(ctx context.Context, in *GetSecretKeyByIdReq, opts ...grpc.CallOption) (*GetSecretKeyByIdResp, error)
	SearchSecretKey(ctx context.Context, in *SearchSecretKeyReq, opts ...grpc.CallOption) (*SearchSecretKeyResp, error)
	//-----------------------users-----------------------
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error)
	GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddCasbinRule(ctx context.Context, in *AddCasbinRuleReq, opts ...grpc.CallOption) (*AddCasbinRuleResp, error) {
	out := new(AddCasbinRuleResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateCasbinRule(ctx context.Context, in *UpdateCasbinRuleReq, opts ...grpc.CallOption) (*UpdateCasbinRuleResp, error) {
	out := new(UpdateCasbinRuleResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelCasbinRule(ctx context.Context, in *DelCasbinRuleReq, opts ...grpc.CallOption) (*DelCasbinRuleResp, error) {
	out := new(DelCasbinRuleResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetCasbinRuleById(ctx context.Context, in *GetCasbinRuleByIdReq, opts ...grpc.CallOption) (*GetCasbinRuleByIdResp, error) {
	out := new(GetCasbinRuleByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetCasbinRuleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchCasbinRule(ctx context.Context, in *SearchCasbinRuleReq, opts ...grpc.CallOption) (*SearchCasbinRuleResp, error) {
	out := new(SearchCasbinRuleResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddConfig(ctx context.Context, in *AddConfigReq, opts ...grpc.CallOption) (*AddConfigResp, error) {
	out := new(AddConfigResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelConfig(ctx context.Context, in *DelConfigReq, opts ...grpc.CallOption) (*DelConfigResp, error) {
	out := new(DelConfigResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetConfigById(ctx context.Context, in *GetConfigByIdReq, opts ...grpc.CallOption) (*GetConfigByIdResp, error) {
	out := new(GetConfigByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetConfigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchConfig(ctx context.Context, in *SearchConfigReq, opts ...grpc.CallOption) (*SearchConfigResp, error) {
	out := new(SearchConfigResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddFrontPermit(ctx context.Context, in *AddFrontPermitReq, opts ...grpc.CallOption) (*AddFrontPermitResp, error) {
	out := new(AddFrontPermitResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddFrontPermit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateFrontPermit(ctx context.Context, in *UpdateFrontPermitReq, opts ...grpc.CallOption) (*UpdateFrontPermitResp, error) {
	out := new(UpdateFrontPermitResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateFrontPermit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelFrontPermit(ctx context.Context, in *DelFrontPermitReq, opts ...grpc.CallOption) (*DelFrontPermitResp, error) {
	out := new(DelFrontPermitResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelFrontPermit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFrontPermitById(ctx context.Context, in *GetFrontPermitByIdReq, opts ...grpc.CallOption) (*GetFrontPermitByIdResp, error) {
	out := new(GetFrontPermitByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetFrontPermitById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchFrontPermit(ctx context.Context, in *SearchFrontPermitReq, opts ...grpc.CallOption) (*SearchFrontPermitResp, error) {
	out := new(SearchFrontPermitResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchFrontPermit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddLog(ctx context.Context, in *AddLogReq, opts ...grpc.CallOption) (*AddLogResp, error) {
	out := new(AddLogResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateLog(ctx context.Context, in *UpdateLogReq, opts ...grpc.CallOption) (*UpdateLogResp, error) {
	out := new(UpdateLogResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelLog(ctx context.Context, in *DelLogReq, opts ...grpc.CallOption) (*DelLogResp, error) {
	out := new(DelLogResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetLogById(ctx context.Context, in *GetLogByIdReq, opts ...grpc.CallOption) (*GetLogByIdResp, error) {
	out := new(GetLogByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetLogById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchLog(ctx context.Context, in *SearchLogReq, opts ...grpc.CallOption) (*SearchLogResp, error) {
	out := new(SearchLogResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	out := new(AddOrderResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	out := new(UpdateOrderResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error) {
	out := new(DelOrderResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	out := new(GetOrderByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error) {
	out := new(SearchOrderResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddPermission(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*AddPermissionResp, error) {
	out := new(AddPermissionResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdatePermission(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error) {
	out := new(UpdatePermissionResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelPermission(ctx context.Context, in *DelPermissionReq, opts ...grpc.CallOption) (*DelPermissionResp, error) {
	out := new(DelPermissionResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPermissionById(ctx context.Context, in *GetPermissionByIdReq, opts ...grpc.CallOption) (*GetPermissionByIdResp, error) {
	out := new(GetPermissionByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetPermissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchPermission(ctx context.Context, in *SearchPermissionReq, opts ...grpc.CallOption) (*SearchPermissionResp, error) {
	out := new(SearchPermissionResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error) {
	out := new(AddRoleResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*DelRoleResp, error) {
	out := new(DelRoleResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetRoleById(ctx context.Context, in *GetRoleByIdReq, opts ...grpc.CallOption) (*GetRoleByIdResp, error) {
	out := new(GetRoleByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchRole(ctx context.Context, in *SearchRoleReq, opts ...grpc.CallOption) (*SearchRoleResp, error) {
	out := new(SearchRoleResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddSecretKey(ctx context.Context, in *AddSecretKeyReq, opts ...grpc.CallOption) (*AddSecretKeyResp, error) {
	out := new(AddSecretKeyResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddSecretKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateSecretKey(ctx context.Context, in *UpdateSecretKeyReq, opts ...grpc.CallOption) (*UpdateSecretKeyResp, error) {
	out := new(UpdateSecretKeyResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateSecretKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelSecretKey(ctx context.Context, in *DelSecretKeyReq, opts ...grpc.CallOption) (*DelSecretKeyResp, error) {
	out := new(DelSecretKeyResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelSecretKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetSecretKeyById(ctx context.Context, in *GetSecretKeyByIdReq, opts ...grpc.CallOption) (*GetSecretKeyByIdResp, error) {
	out := new(GetSecretKeyByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetSecretKeyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchSecretKey(ctx context.Context, in *SearchSecretKeyReq, opts ...grpc.CallOption) (*SearchSecretKeyResp, error) {
	out := new(SearchSecretKeyResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchSecretKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/pb.user/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/pb.user/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error) {
	out := new(DelUserResp)
	err := c.cc.Invoke(ctx, "/pb.user/DelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, "/pb.user/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	out := new(SearchUserResp)
	err := c.cc.Invoke(ctx, "/pb.user/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	//-----------------------casbinRule-----------------------
	AddCasbinRule(context.Context, *AddCasbinRuleReq) (*AddCasbinRuleResp, error)
	UpdateCasbinRule(context.Context, *UpdateCasbinRuleReq) (*UpdateCasbinRuleResp, error)
	DelCasbinRule(context.Context, *DelCasbinRuleReq) (*DelCasbinRuleResp, error)
	GetCasbinRuleById(context.Context, *GetCasbinRuleByIdReq) (*GetCasbinRuleByIdResp, error)
	SearchCasbinRule(context.Context, *SearchCasbinRuleReq) (*SearchCasbinRuleResp, error)
	//-----------------------configs-----------------------
	AddConfig(context.Context, *AddConfigReq) (*AddConfigResp, error)
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	DelConfig(context.Context, *DelConfigReq) (*DelConfigResp, error)
	GetConfigById(context.Context, *GetConfigByIdReq) (*GetConfigByIdResp, error)
	SearchConfig(context.Context, *SearchConfigReq) (*SearchConfigResp, error)
	//-----------------------frontPermits-----------------------
	AddFrontPermit(context.Context, *AddFrontPermitReq) (*AddFrontPermitResp, error)
	UpdateFrontPermit(context.Context, *UpdateFrontPermitReq) (*UpdateFrontPermitResp, error)
	DelFrontPermit(context.Context, *DelFrontPermitReq) (*DelFrontPermitResp, error)
	GetFrontPermitById(context.Context, *GetFrontPermitByIdReq) (*GetFrontPermitByIdResp, error)
	SearchFrontPermit(context.Context, *SearchFrontPermitReq) (*SearchFrontPermitResp, error)
	//-----------------------logs-----------------------
	AddLog(context.Context, *AddLogReq) (*AddLogResp, error)
	UpdateLog(context.Context, *UpdateLogReq) (*UpdateLogResp, error)
	DelLog(context.Context, *DelLogReq) (*DelLogResp, error)
	GetLogById(context.Context, *GetLogByIdReq) (*GetLogByIdResp, error)
	SearchLog(context.Context, *SearchLogReq) (*SearchLogResp, error)
	//-----------------------orders-----------------------
	AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error)
	UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error)
	DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error)
	GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error)
	SearchOrder(context.Context, *SearchOrderReq) (*SearchOrderResp, error)
	//-----------------------permissions-----------------------
	AddPermission(context.Context, *AddPermissionReq) (*AddPermissionResp, error)
	UpdatePermission(context.Context, *UpdatePermissionReq) (*UpdatePermissionResp, error)
	DelPermission(context.Context, *DelPermissionReq) (*DelPermissionResp, error)
	GetPermissionById(context.Context, *GetPermissionByIdReq) (*GetPermissionByIdResp, error)
	SearchPermission(context.Context, *SearchPermissionReq) (*SearchPermissionResp, error)
	//-----------------------roles-----------------------
	AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	DelRole(context.Context, *DelRoleReq) (*DelRoleResp, error)
	GetRoleById(context.Context, *GetRoleByIdReq) (*GetRoleByIdResp, error)
	SearchRole(context.Context, *SearchRoleReq) (*SearchRoleResp, error)
	//-----------------------secretKeys-----------------------
	AddSecretKey(context.Context, *AddSecretKeyReq) (*AddSecretKeyResp, error)
	UpdateSecretKey(context.Context, *UpdateSecretKeyReq) (*UpdateSecretKeyResp, error)
	DelSecretKey(context.Context, *DelSecretKeyReq) (*DelSecretKeyResp, error)
	GetSecretKeyById(context.Context, *GetSecretKeyByIdReq) (*GetSecretKeyByIdResp, error)
	SearchSecretKey(context.Context, *SearchSecretKeyReq) (*SearchSecretKeyResp, error)
	//-----------------------users-----------------------
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	DelUser(context.Context, *DelUserReq) (*DelUserResp, error)
	GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error)
	SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddCasbinRule(context.Context, *AddCasbinRuleReq) (*AddCasbinRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCasbinRule not implemented")
}
func (UnimplementedUserServer) UpdateCasbinRule(context.Context, *UpdateCasbinRuleReq) (*UpdateCasbinRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCasbinRule not implemented")
}
func (UnimplementedUserServer) DelCasbinRule(context.Context, *DelCasbinRuleReq) (*DelCasbinRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCasbinRule not implemented")
}
func (UnimplementedUserServer) GetCasbinRuleById(context.Context, *GetCasbinRuleByIdReq) (*GetCasbinRuleByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasbinRuleById not implemented")
}
func (UnimplementedUserServer) SearchCasbinRule(context.Context, *SearchCasbinRuleReq) (*SearchCasbinRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCasbinRule not implemented")
}
func (UnimplementedUserServer) AddConfig(context.Context, *AddConfigReq) (*AddConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (UnimplementedUserServer) UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedUserServer) DelConfig(context.Context, *DelConfigReq) (*DelConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConfig not implemented")
}
func (UnimplementedUserServer) GetConfigById(context.Context, *GetConfigByIdReq) (*GetConfigByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigById not implemented")
}
func (UnimplementedUserServer) SearchConfig(context.Context, *SearchConfigReq) (*SearchConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConfig not implemented")
}
func (UnimplementedUserServer) AddFrontPermit(context.Context, *AddFrontPermitReq) (*AddFrontPermitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFrontPermit not implemented")
}
func (UnimplementedUserServer) UpdateFrontPermit(context.Context, *UpdateFrontPermitReq) (*UpdateFrontPermitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFrontPermit not implemented")
}
func (UnimplementedUserServer) DelFrontPermit(context.Context, *DelFrontPermitReq) (*DelFrontPermitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFrontPermit not implemented")
}
func (UnimplementedUserServer) GetFrontPermitById(context.Context, *GetFrontPermitByIdReq) (*GetFrontPermitByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontPermitById not implemented")
}
func (UnimplementedUserServer) SearchFrontPermit(context.Context, *SearchFrontPermitReq) (*SearchFrontPermitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFrontPermit not implemented")
}
func (UnimplementedUserServer) AddLog(context.Context, *AddLogReq) (*AddLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLog not implemented")
}
func (UnimplementedUserServer) UpdateLog(context.Context, *UpdateLogReq) (*UpdateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLog not implemented")
}
func (UnimplementedUserServer) DelLog(context.Context, *DelLogReq) (*DelLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLog not implemented")
}
func (UnimplementedUserServer) GetLogById(context.Context, *GetLogByIdReq) (*GetLogByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogById not implemented")
}
func (UnimplementedUserServer) SearchLog(context.Context, *SearchLogReq) (*SearchLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLog not implemented")
}
func (UnimplementedUserServer) AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedUserServer) UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedUserServer) DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrder not implemented")
}
func (UnimplementedUserServer) GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedUserServer) SearchOrder(context.Context, *SearchOrderReq) (*SearchOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrder not implemented")
}
func (UnimplementedUserServer) AddPermission(context.Context, *AddPermissionReq) (*AddPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermission not implemented")
}
func (UnimplementedUserServer) UpdatePermission(context.Context, *UpdatePermissionReq) (*UpdatePermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedUserServer) DelPermission(context.Context, *DelPermissionReq) (*DelPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPermission not implemented")
}
func (UnimplementedUserServer) GetPermissionById(context.Context, *GetPermissionByIdReq) (*GetPermissionByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionById not implemented")
}
func (UnimplementedUserServer) SearchPermission(context.Context, *SearchPermissionReq) (*SearchPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPermission not implemented")
}
func (UnimplementedUserServer) AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedUserServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedUserServer) DelRole(context.Context, *DelRoleReq) (*DelRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRole not implemented")
}
func (UnimplementedUserServer) GetRoleById(context.Context, *GetRoleByIdReq) (*GetRoleByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (UnimplementedUserServer) SearchRole(context.Context, *SearchRoleReq) (*SearchRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRole not implemented")
}
func (UnimplementedUserServer) AddSecretKey(context.Context, *AddSecretKeyReq) (*AddSecretKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecretKey not implemented")
}
func (UnimplementedUserServer) UpdateSecretKey(context.Context, *UpdateSecretKeyReq) (*UpdateSecretKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecretKey not implemented")
}
func (UnimplementedUserServer) DelSecretKey(context.Context, *DelSecretKeyReq) (*DelSecretKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSecretKey not implemented")
}
func (UnimplementedUserServer) GetSecretKeyById(context.Context, *GetSecretKeyByIdReq) (*GetSecretKeyByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretKeyById not implemented")
}
func (UnimplementedUserServer) SearchSecretKey(context.Context, *SearchSecretKeyReq) (*SearchSecretKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSecretKey not implemented")
}
func (UnimplementedUserServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServer) DelUser(context.Context, *DelUserReq) (*DelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedUserServer) GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCasbinRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddCasbinRule(ctx, req.(*AddCasbinRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCasbinRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateCasbinRule(ctx, req.(*UpdateCasbinRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCasbinRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelCasbinRule(ctx, req.(*DelCasbinRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetCasbinRuleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCasbinRuleByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetCasbinRuleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetCasbinRuleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetCasbinRuleById(ctx, req.(*GetCasbinRuleByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCasbinRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchCasbinRule(ctx, req.(*SearchCasbinRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddConfig(ctx, req.(*AddConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelConfig(ctx, req.(*DelConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetConfigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetConfigById(ctx, req.(*GetConfigByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchConfig(ctx, req.(*SearchConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddFrontPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFrontPermitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddFrontPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddFrontPermit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddFrontPermit(ctx, req.(*AddFrontPermitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateFrontPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFrontPermitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateFrontPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateFrontPermit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateFrontPermit(ctx, req.(*UpdateFrontPermitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelFrontPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFrontPermitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelFrontPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelFrontPermit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelFrontPermit(ctx, req.(*DelFrontPermitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFrontPermitById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontPermitByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFrontPermitById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetFrontPermitById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFrontPermitById(ctx, req.(*GetFrontPermitByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchFrontPermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFrontPermitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchFrontPermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchFrontPermit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchFrontPermit(ctx, req.(*SearchFrontPermitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddLog(ctx, req.(*AddLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateLog(ctx, req.(*UpdateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelLog(ctx, req.(*DelLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetLogById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetLogById(ctx, req.(*GetLogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchLog(ctx, req.(*SearchLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddOrder(ctx, req.(*AddOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateOrder(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelOrder(ctx, req.(*DelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrderById(ctx, req.(*GetOrderByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchOrder(ctx, req.(*SearchOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddPermission(ctx, req.(*AddPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdatePermission(ctx, req.(*UpdatePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelPermission(ctx, req.(*DelPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPermissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPermissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetPermissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPermissionById(ctx, req.(*GetPermissionByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchPermission(ctx, req.(*SearchPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelRole(ctx, req.(*DelRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetRoleById(ctx, req.(*GetRoleByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchRole(ctx, req.(*SearchRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddSecretKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddSecretKey(ctx, req.(*AddSecretKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateSecretKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateSecretKey(ctx, req.(*UpdateSecretKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSecretKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelSecretKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelSecretKey(ctx, req.(*DelSecretKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetSecretKeyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretKeyByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetSecretKeyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetSecretKeyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetSecretKeyById(ctx, req.(*GetSecretKeyByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSecretKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchSecretKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchSecretKey(ctx, req.(*SearchSecretKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserById(ctx, req.(*GetUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchUser(ctx, req.(*SearchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCasbinRule",
			Handler:    _User_AddCasbinRule_Handler,
		},
		{
			MethodName: "UpdateCasbinRule",
			Handler:    _User_UpdateCasbinRule_Handler,
		},
		{
			MethodName: "DelCasbinRule",
			Handler:    _User_DelCasbinRule_Handler,
		},
		{
			MethodName: "GetCasbinRuleById",
			Handler:    _User_GetCasbinRuleById_Handler,
		},
		{
			MethodName: "SearchCasbinRule",
			Handler:    _User_SearchCasbinRule_Handler,
		},
		{
			MethodName: "AddConfig",
			Handler:    _User_AddConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _User_UpdateConfig_Handler,
		},
		{
			MethodName: "DelConfig",
			Handler:    _User_DelConfig_Handler,
		},
		{
			MethodName: "GetConfigById",
			Handler:    _User_GetConfigById_Handler,
		},
		{
			MethodName: "SearchConfig",
			Handler:    _User_SearchConfig_Handler,
		},
		{
			MethodName: "AddFrontPermit",
			Handler:    _User_AddFrontPermit_Handler,
		},
		{
			MethodName: "UpdateFrontPermit",
			Handler:    _User_UpdateFrontPermit_Handler,
		},
		{
			MethodName: "DelFrontPermit",
			Handler:    _User_DelFrontPermit_Handler,
		},
		{
			MethodName: "GetFrontPermitById",
			Handler:    _User_GetFrontPermitById_Handler,
		},
		{
			MethodName: "SearchFrontPermit",
			Handler:    _User_SearchFrontPermit_Handler,
		},
		{
			MethodName: "AddLog",
			Handler:    _User_AddLog_Handler,
		},
		{
			MethodName: "UpdateLog",
			Handler:    _User_UpdateLog_Handler,
		},
		{
			MethodName: "DelLog",
			Handler:    _User_DelLog_Handler,
		},
		{
			MethodName: "GetLogById",
			Handler:    _User_GetLogById_Handler,
		},
		{
			MethodName: "SearchLog",
			Handler:    _User_SearchLog_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _User_AddOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _User_UpdateOrder_Handler,
		},
		{
			MethodName: "DelOrder",
			Handler:    _User_DelOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _User_GetOrderById_Handler,
		},
		{
			MethodName: "SearchOrder",
			Handler:    _User_SearchOrder_Handler,
		},
		{
			MethodName: "AddPermission",
			Handler:    _User_AddPermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _User_UpdatePermission_Handler,
		},
		{
			MethodName: "DelPermission",
			Handler:    _User_DelPermission_Handler,
		},
		{
			MethodName: "GetPermissionById",
			Handler:    _User_GetPermissionById_Handler,
		},
		{
			MethodName: "SearchPermission",
			Handler:    _User_SearchPermission_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _User_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _User_UpdateRole_Handler,
		},
		{
			MethodName: "DelRole",
			Handler:    _User_DelRole_Handler,
		},
		{
			MethodName: "GetRoleById",
			Handler:    _User_GetRoleById_Handler,
		},
		{
			MethodName: "SearchRole",
			Handler:    _User_SearchRole_Handler,
		},
		{
			MethodName: "AddSecretKey",
			Handler:    _User_AddSecretKey_Handler,
		},
		{
			MethodName: "UpdateSecretKey",
			Handler:    _User_UpdateSecretKey_Handler,
		},
		{
			MethodName: "DelSecretKey",
			Handler:    _User_DelSecretKey_Handler,
		},
		{
			MethodName: "GetSecretKeyById",
			Handler:    _User_GetSecretKeyById_Handler,
		},
		{
			MethodName: "SearchSecretKey",
			Handler:    _User_SearchSecretKey_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _User_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _User_UpdateUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _User_DelUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _User_GetUserById_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _User_SearchUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
